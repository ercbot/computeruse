name: Build Demo Docker Image

on:
  # Run when the Rust build completes successfully
  workflow_run:
    workflows: ["Build Valk Server"]
    types:
      - completed



env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}-chromium-demo

permissions:
  contents: read
  packages: write
  actions: read

jobs:
  build-and-push:
    # Only run if the triggering workflow succeeded or this was manually triggered
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Download the binary from the previous workflow
      - name: Download binary
        uses: actions/download-artifact@v2
        with:
          name: valk-server-linux-x86_64
          path: examples/chromium-demo/valk-server
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: Check binary exists
        run: |
          if [ -f examples/chromium-demo/valk-server/valk-server ]; then
            chmod +x examples/chromium-demo/valk-server/valk-server
          else
            echo "Warning: Binary not found, Docker build may fail"
          fi

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: examples/chromium-demo
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max